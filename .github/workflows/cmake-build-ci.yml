# Generated file; do not edit!
name: cmake-build-ci
on:
  workflow_dispatch:
  release:
    types: [published]
  push:
    paths:
      - ".github/workflows/cmake-build-ci*"
      - "CMake*"
      - "CPack*"
      - "contrib/**"
      - "include/**"
      - "src/**"
      - "test/**"
    branches-ignore:
      - gh-pages
  pull_request:
    branches:
      - master
      - v1.x
env:
  # defaults
  INSTALL_MEMCACHED:  memcached
  ENABLE_SASL:        "OFF" # ^ almost no memcached distribution package has built in sasl support
  ENABLE_HASH_HSIEH:  "ON"
  ENABLE_DTRACE:      "OFF"
  OS_VND:   Linux #
  OS_VER:   ubuntu-22.04 #
  CC_VND:   gnu #
  CC_VER:   cur

jobs:

# memcached
  debug-memcached:
    name: debug memcached
    runs-on: ubuntu-22.04 #
    continue-on-error: true
    strategy:
      matrix:
        memcached: ['master', '1.6.18', '1.6.17', '1.6.16']
    env:
      CMAKE_BUILD_TYPE:   "Debug"
      BUILD_TESTING:      "ON"
      VERBOSE:            "ON"
      INSTALL_MEMCACHED:  ""
      MEMCACHED_PREFIX:   "/tmp"
      ENABLE_SASL:        "ON"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/checkout@v3
        with:
          repository: memcached/memcached
          path: memcached
          ref: ${{ matrix.memcached }}
      - name: Prepare environment (for cur gnu on ubuntu-22.04)
        if: (env.OS_VER=='ubuntu-22.04') && (env.CC_VND=='gnu') && (env.CC_VER=='cur')
        run: |
          echo CC="gcc-11" >> ${GITHUB_ENV}
          echo CXX="g++-11" >> ${GITHUB_ENV}
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -my \
            libevent-dev \
            libsasl2-dev \
            libtbb-dev \
            python3-sphinx \
            ${INSTALL_MEMCACHED} \
            ${INSTALL_CC} ${INSTALL_CXX}
          sudo systemctl stop memcached || true
      - name: Build memcached
        if: runner.os != 'Windows'
        run: |
          if test -d memcached
          then
            cd memcached
            ./autogen.sh
            cp configure{,.old} && sed -e 's/-Werror//g' <configure.old >configure
            ./configure CFLAGS="-O2 -pipe -fcommon" \
              --prefix=${MEMCACHED_PREFIX} \
              --enable-sasl \
              --enable-sasl-pwdb \
              --disable-coverage \
              --disable-dependency-tracking \
              --disable-docs \
              --disable-extstore \
              --disable-option-checking \
              ;
            make -j2
            make install
            cd ..
            echo MEMCACHED_BINARY="${MEMCACHED_PREFIX}/bin/memcached" >> ${GITHUB_ENV}
          fi
      - name: Generate build tree (${{ env.CMAKE_BUILD_TYPE }})
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} -S . -B build
      - name: Build all with ${{ env.CXX }} ${{ env.CXXFLAGS }}
        run: cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }} -j2
      - name: Test
        if: env.BUILD_TESTING == 'ON'
        run: cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }} -j2 --target test
      - name: Install
        if: env.BUILD_TESTING == 'ON'
        run: cmake --install build --config ${{ env.CMAKE_BUILD_TYPE }} --prefix /tmp
      - name: Failed tests log
        if: ${{ env.BUILD_TESTING == 'ON' && failure() }}
        run: cat build/Testing/Temporary/LastTest.log || true
      - name: Package
        env:
          PUSH_ARTIFACTS_ID: ${{ secrets.PUSH_ARTIFACTS_ID }}
        if: env.PUSH_ARTIFACTS_ID != '' && env.CMAKE_BUILD_TYPE == 'Release'
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} -S . -B build
          cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }} -j2 --target package
          cmake -DCPACK_COMPONENT_INSTALL=ON build
          cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }} -j2 --target package
          cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }} -j2 --target push-artifacts
      - name: Notify Gitter
        env:
          GITTER: ${{ secrets.GITTER }}
        if: (success() || failure()) && env.GITTER != ''
        run: bash .github/notify-gitter.sh ${{ job.status }}
